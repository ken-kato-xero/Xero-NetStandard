/* 
 * Xero Payroll AU API
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollAu
{
    /// <summary>
    /// LeaveCategory
    /// </summary>
    [DataContract]
    public partial class LeaveCategory :  IEquatable<LeaveCategory>, IValidatableObject
    {
        
        /// <summary>
        /// Name of the leave category
        /// </summary>
        /// <value>Name of the leave category</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Code of the leave category
        /// </summary>
        /// <value>Code of the leave category</value>
        [DataMember(Name="LeaveCategoryCode", EmitDefaultValue=false)]
        public string LeaveCategoryCode { get; set; }

        /// <summary>
        /// Boolean to indicates whether the Leave Category supports SGC exemption
        /// </summary>
        /// <value>Boolean to indicates whether the Leave Category supports SGC exemption</value>
        [DataMember(Name="CanBeSGCExempt", EmitDefaultValue=false)]
        public bool? CanBeSGCExempt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaveCategory {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LeaveCategoryCode: ").Append(LeaveCategoryCode).Append("\n");
            sb.Append("  CanBeSGCExempt: ").Append(CanBeSGCExempt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaveCategory);
        }

        /// <summary>
        /// Returns true if LeaveCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaveCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaveCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LeaveCategoryCode == input.LeaveCategoryCode ||
                    (this.LeaveCategoryCode != null &&
                    this.LeaveCategoryCode.Equals(input.LeaveCategoryCode))
                ) && 
                (
                    this.CanBeSGCExempt == input.CanBeSGCExempt ||
                    (this.CanBeSGCExempt != null &&
                    this.CanBeSGCExempt.Equals(input.CanBeSGCExempt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LeaveCategoryCode != null)
                    hashCode = hashCode * 59 + this.LeaveCategoryCode.GetHashCode();
                if (this.CanBeSGCExempt != null)
                    hashCode = hashCode * 59 + this.CanBeSGCExempt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
